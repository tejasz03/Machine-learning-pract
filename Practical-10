import numpy as np

# Helper function: sigmoid and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Convert word into numeric features (length, vowel count)
def extract_features(word):
    vowels = 'aeiou'
    length = len(word)
    vowel_count = sum(1 for char in word.lower() if char in vowels)
    return np.array([length, vowel_count])

# Encode labels (short: [1,0,0], medium: [0,1,0], long: [0,0,1])
def encode_label(label):
    if label == "short":
        return np.array([1, 0, 0])
    elif label == "medium":
        return np.array([0, 1, 0])
    else:
        return np.array([0, 0, 1])

# Dataset
words = ["hi", "cat", "elephant", "book", "yes", "amazing", "go", "tiger"]
labels = ["short", "short", "long", "medium", "short", "long", "short", "medium"]

# Preprocess data
X = np.array([extract_features(word) for word in words])
y = np.array([encode_label(label) for label in labels])

# Normalize features
X = X / np.max(X, axis=0)

# Initialize weights
input_layer_neurons = 2
hidden_layer_neurons = 4
output_layer_neurons = 3

# Random weight initialization
np.random.seed(42)
wh = np.random.uniform(size=(input_layer_neurons, hidden_layer_neurons))  # weights for input -> hidden
bh = np.random.uniform(size=(1, hidden_layer_neurons))                    # bias for hidden
wo = np.random.uniform(size=(hidden_layer_neurons, output_layer_neurons)) # weights for hidden -> output
bo = np.random.uniform(size=(1, output_layer_neurons))                    # bias for output

# Training the neural network
epochs = 10000
lr = 0.1

for epoch in range(epochs):
    # Feedforward
    hidden_input = np.dot(X, wh) + bh
    hidden_output = sigmoid(hidden_input)

    final_input = np.dot(hidden_output, wo) + bo
    final_output = sigmoid(final_input)

    # Backpropagation
    error = y - final_output
    d_output = error * sigmoid_derivative(final_output)

    error_hidden = d_output.dot(wo.T)
    d_hidden = error_hidden * sigmoid_derivative(hidden_output)

    # Update weights and biases
    wo += hidden_output.T.dot(d_output) * lr
    bo += np.sum(d_output, axis=0, keepdims=True) * lr
    wh += X.T.dot(d_hidden) * lr
    bh += np.sum(d_hidden, axis=0, keepdims=True) * lr

    # Optional: print loss occasionally
    if epoch % 2000 == 0:
        loss = np.mean(np.square(error))
        print(f"Epoch {epoch}, Loss: {loss:.4f}")

# Predict function
def classify_word(word):
    features = extract_features(word)
    features = features / np.max(X, axis=0)
    hidden_layer = sigmoid(np.dot(features, wh) + bh)
    output_layer = sigmoid(np.dot(hidden_layer, wo) + bo)
    prediction = np.argmax(output_layer)
    classes = ['short', 'medium', 'long']
    return classes[prediction]

# Test
test_word = "hello"
print(f"The word '{test_word}' is classified as:", classify_word(test_word))
